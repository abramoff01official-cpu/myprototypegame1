extends CharacterBody2D

@export var speed: float = 50.0
@export var attack_range: float = 48.0
@export var damage: int = 40
@export var attack_cooldown_sec: float = 1
@export var player_path: NodePath = NodePath("")

var _player: Node = null
var _velocity: Vector2 = Vector2.ZERO
var _can_attack: bool = true
var _attack_cooldown_timer: float = 0.0

# Состояния
var is_player_in_detector: bool = false
var is_chasing: bool = false
var start_position: Vector2

func _ready():
	start_position = global_position

	if player_path != NodePath(""):
		_player = get_node_or_null(player_path)
	if _player == null:
		var players = get_tree().get_nodes_in_group("Player")
		if players.size() > 0:
			_player = players[0]

	# Подключаем сигналы от Area2D
	if has_node("Detector"):
		$Detector.body_entered.connect(_on_detector_entered)
		$Detector.body_exited.connect(_on_detector_exited)

	if has_node("Exit"):
		$Exit.body_entered.connect(_on_exit_entered)
		$Exit.body_exited.connect(_on_exit_exited)

func _physics_process(delta):
	if _player == null:
		return

	# КД атаки
	if not _can_attack:
		_attack_cooldown_timer -= delta
		if _attack_cooldown_timer <= 0:
			_can_attack = true

	if is_chasing:
		var to_player = _player.global_position - global_position
		var dist = to_player.length()

		if dist > attack_range * 0.5:
			_velocity = to_player.normalized() * speed
			if has_node("Sprite2D"):
				$Sprite2D.flip_h = _velocity.x < 0
		else:
			_velocity = Vector2.ZERO
			_try_attack()
	else:
		# возвращаемся к начальному месту
		var to_start = start_position - global_position
		if to_start.length() > 2:
			_velocity = to_start.normalized() * speed
			if has_node("Sprite2D"):
				$Sprite2D.flip_h = _velocity.x < 0
		else:
			_velocity = Vector2.ZERO

	velocity = _velocity
	move_and_slide()

func _try_attack():
	if not _can_attack:
		return
	_can_attack = false
	_attack_cooldown_timer = attack_cooldown_sec

	if has_node("AnimationPlayer"):
		$AnimationPlayer.play("attack")

	if _player and _player.global_position.distance_to(global_position) <= attack_range:
		if _player.has_method("take_damage"):
			_player.take_damage(damage)
		elif "hp" in _player:
			_player.hp -= damage

# ====== СИГНАЛЫ ======
func _on_detector_entered(body):
	if body == _player:
		is_player_in_detector = true
		is_chasing = true

func _on_detector_exited(body):
	if body == _player:
		is_player_in_detector = false
		# Враг не перестает преследовать, если игрок вышел только из Detector

func _on_exit_entered(body):
	if body == _player:
		# Игрок зашел в Exit — враг НЕ начинает преследовать
		is_chasing = false

func _on_exit_exited(body):
	if body == _player:
		# Игрок вышел из Exit — перестать преследовать
		is_chasing = false
